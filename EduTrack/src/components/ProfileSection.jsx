import React, { useState } from 'react';
import { 
  User, 
  Mail, 
  Calendar, 
  Edit3, 
  Save,
  Award,
  BookOpen,
  Download,
  Share2,
  Settings,
  Lock,
  Eye,
  EyeOff,
  CheckCircle
} from 'lucide-react';
import { useData } from '../context/DataContext.jsx';
import { useAuth } from '../context/AuthContext.jsx';

const ProfileSection = ({ user: propUser }) => {
  const { user: authUser, updateUser } = useAuth();
  const user = propUser || authUser;
  
  const { semesters, calculateCGPA } = useData();
  const [isEditing, setIsEditing] = useState(false);
  const [showPasswordChange, setShowPasswordChange] = useState(false);
  const [saveStatus, setSaveStatus] = useState('');
  const [profileData, setProfileData] = useState({
    name: user?.name || '',
    email: user?.email || '',
    phone: '',
    rollNumber: '',
    course: '',
    branch: '',
    year: '',
    institution: ''
  });
  const [passwordData, setPasswordData] = useState({
    currentPassword: '',
    newPassword: '',
    confirmPassword: ''
  });
  const [showPasswords, setShowPasswords] = useState({
    current: false,
    new: false,
    confirm: false
  });

  const currentCGPA = calculateCGPA();
  const totalCredits = semesters.reduce((sum, sem) => sum + sem.totalCredits, 0);
  const totalSemesters = semesters.length;

  if (!user) {
    return (
      <div className="text-center py-12">
        <User className="w-24 h-24 text-gray-600 mx-auto mb-6" />
        <h2 className="text-2xl font-bold text-white mb-4">User Not Found</h2>
        <p className="text-gray-400">Please log in to view your profile</p>
      </div>
    );
  }

  const handleSaveProfile = () => {
    setSaveStatus('saving');
    
    // Simulate API call delay
    setTimeout(() => {
      try {
        // Update user data in localStorage
        const updatedUser = {
          ...user,
          ...profileData
        };
        
        localStorage.setItem('currentUser', JSON.stringify(updatedUser));
        
        // Update auth context if available
        if (updateUser) {
          updateUser(updatedUser);
        }
        
        setSaveStatus('saved');
        setIsEditing(false);
        
        // Clear save status after 3 seconds
        setTimeout(() => {
          setSaveStatus('');
        }, 3000);
        
      } catch (error) {
        console.error('Error saving profile:', error);
        setSaveStatus('error');
        setTimeout(() => {
          setSaveStatus('');
        }, 3000);
      }
    }, 1000);
    setIsEditing(false);
  };

  const handlePasswordChange = () => {
    // In a real app, this would validate and update password
    setShowPasswordChange(false);
    setPasswordData({
      currentPassword: '',
      newPassword: '',
      confirmPassword: ''
    });
  };

  const generatePDF = () => {
    // Mock PDF generation
    const reportContent = `
      Academic Report
      ================
      
      Student: ${user.name}
      Email: ${user.email}
      Current CGPA: ${currentCGPA}
      Total Semesters: ${totalSemesters}
      Total Credits: ${totalCredits}
      
      Semester Details:
      ${semesters.map(sem => `
        ${sem.name} (${sem.year}): SGPA ${sem.sgpa}
        Subjects: ${sem.totalSubjects}, Credits: ${sem.totalCredits}
      `).join('\n')}
    `;
    
    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${user.name}_Academic_Report.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  const shareProfile = () => {
    const shareText = `ðŸŽ“ My Academic Performance\n\nCGPA: ${currentCGPA}\nSemesters Completed: ${totalSemesters}\nTotal Credits: ${totalCredits}\n\nGenerated by Smart CGPA Calculator`;
    
    if (navigator.share) {
      navigator.share({
        title: 'My Academic Performance',
        text: shareText,
      });
    } else {
      navigator.clipboard.writeText(shareText);
      alert('Performance summary copied to clipboard!');
    }
  };

  return (
    <div className="max-w-4xl mx-auto space-y-6">
      {/* Profile Header */}
      <div className="bg-gradient-to-r from-yellow-400 to-yellow-500 rounded-2xl p-8 text-gray-900">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-6">
            <div className="bg-white p-4 rounded-full">
              <User className="w-12 h-12 text-yellow-500" />
            </div>
            <div>
              <h1 className="text-3xl font-bold">{user.name}</h1>
              <p className="text-gray-700">{user.email}</p>
              <p className="text-gray-600 text-sm">
                Member since {new Date(user.joinedDate).toLocaleDateString()}
              </p>
            </div>
          </div>
          <div className="text-right">
            <p className="text-gray-700 font-medium">Current CGPA</p>
            <p className="text-4xl font-bold">{currentCGPA}</p>
          </div>
        </div>
      </div>

      {/* Quick Stats */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="bg-gray-800 rounded-2xl p-6 border border-gray-700">
          <div className="flex items-center space-x-4">
            <div className="bg-blue-500 p-3 rounded-full">
              <Calendar className="w-6 h-6 text-white" />
            </div>
            <div>
              <p className="text-gray-400">Total Semesters</p>
              <p className="text-2xl font-bold text-white">{totalSemesters}</p>
            </div>
          </div>
        </div>
        <div className="bg-gray-800 rounded-2xl p-6 border border-gray-700">
          <div className="flex items-center space-x-4">
            <div className="bg-green-500 p-3 rounded-full">
              <BookOpen className="w-6 h-6 text-white" />
            </div>
            <div>
              <p className="text-gray-400">Total Credits</p>
              <p className="text-2xl font-bold text-white">{totalCredits}</p>
            </div>
          </div>
        </div>
        <div className="bg-gray-800 rounded-2xl p-6 border border-gray-700">
          <div className="flex items-center space-x-4">
            <div className="bg-purple-500 p-3 rounded-full">
              <Award className="w-6 h-6 text-white" />
            </div>
            <div>
              <p className="text-gray-400">Performance</p>
              <p className="text-2xl font-bold text-white">
                {currentCGPA >= 9 ? 'Excellent' : 
                 currentCGPA >= 8 ? 'Very Good' : 
                 currentCGPA >= 7 ? 'Good' : 
                 currentCGPA >= 6 ? 'Average' : 'Below Average'}
              </p>
            </div>
          </div>
        </div>
      </div>

      {/* Profile Information */}
      <div className="bg-gray-800 rounded-2xl p-8 border border-gray-700">
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-2xl font-bold text-white">Profile Information</h2>
          <div className="flex items-center space-x-3">
            {saveStatus && (
              <div className={`flex items-center space-x-2 px-3 py-1 rounded-lg text-sm ${
                saveStatus === 'saving' ? 'bg-blue-500/20 text-blue-400' :
                saveStatus === 'saved' ? 'bg-green-500/20 text-green-400' :
                'bg-red-500/20 text-red-400'
              }`}>
                {saveStatus === 'saving' && (
                  <>
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-400"></div>
                    <span>Saving...</span>
                  </>
                )}
                {saveStatus === 'saved' && (
                  <>
                    <CheckCircle className="w-4 h-4" />
                    <span>Saved!</span>
                  </>
                )}
                {saveStatus === 'error' && (
                  <>
                    <X className="w-4 h-4" />
                    <span>Error saving</span>
                  </>
                )}
              </div>
            )}
            <button
              onClick={() => setIsEditing(!isEditing)}
              disabled={saveStatus === 'saving'}
              className="bg-yellow-400 text-gray-900 px-4 py-2 rounded-lg font-medium hover:bg-yellow-300 transition-colors duration-200 flex items-center space-x-2 disabled:opacity-50"
            >
              <Edit3 className="w-4 h-4" />
              <span>{isEditing ? 'Cancel' : 'Edit Profile'}</span>
            </button>
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label className="block text-sm font-medium text-gray-400 mb-2">Full Name</label>
            <input
              type="text"
              value={profileData.name}
              onChange={(e) => setProfileData({...profileData, name: e.target.value})}
              disabled={!isEditing}
              className="w-full bg-gray-700 border border-gray-600 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-yellow-400 disabled:opacity-50"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-400 mb-2">Email</label>
            <input
              type="email"
              value={profileData.email}
              onChange={(e) => setProfileData({...profileData, email: e.target.value})}
              disabled={!isEditing}
              className="w-full bg-gray-700 border border-gray-600 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-yellow-400 disabled:opacity-50"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-400 mb-2">Phone Number</label>
            <input
              type="tel"
              value={profileData.phone}
              onChange={(e) => setProfileData({...profileData, phone: e.target.value})}
              disabled={!isEditing}
              placeholder="Enter phone number"
              className="w-full bg-gray-700 border border-gray-600 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-yellow-400 disabled:opacity-50"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-400 mb-2">Roll Number</label>
            <input
              type="text"
              value={profileData.rollNumber}
              onChange={(e) => setProfileData({...profileData, rollNumber: e.target.value})}
              disabled={!isEditing}
              placeholder="Enter roll number"
              className="w-full bg-gray-700 border border-gray-600 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-yellow-400 disabled:opacity-50"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-400 mb-2">Course</label>
            <input
              type="text"
              value={profileData.course}
              onChange={(e) => setProfileData({...profileData, course: e.target.value})}
              disabled={!isEditing}
              placeholder="e.g., B.Tech, M.Tech"
              className="w-full bg-gray-700 border border-gray-600 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-yellow-400 disabled:opacity-50"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-400 mb-2">Branch</label>
            <input
              type="text"
              value={profileData.branch}
              onChange={(e) => setProfileData({...profileData, branch: e.target.value})}
              disabled={!isEditing}
              placeholder="e.g., Computer Science"
              className="w-full bg-gray-700 border border-gray-600 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-yellow-400 disabled:opacity-50"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-400 mb-2">Current Year</label>
            <select
              value={profileData.year}
              onChange={(e) => setProfileData({...profileData, year: e.target.value})}
              disabled={!isEditing}
              className="w-full bg-gray-700 border border-gray-600 rounded-lg px-4 py-2 text-white focus:outline-none focus:ring-2 focus:ring-yellow-400 disabled:opacity-50"
            >
              <option value="">Select Year</option>
              <option value="1">1st Year</option>
              <option value="2">2nd Year</option>
              <option value="3">3rd Year</option>
              <option value="4">4th Year</option>
            </select>
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-400 mb-2">Institution</label>
            <input
              type="text"
              value={profileData.institution}
              onChange={(e) => setProfileData({...profileData, institution: e.target.value})}
              disabled={!isEditing}
              placeholder="College/University name"
              className="w-full bg-gray-700 border border-gray-600 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-yellow-400 disabled:opacity-50"
            />
          </div>
        </div>

        {isEditing && (
          <div className="flex justify-end space-x-4 mt-6">
            <button
              onClick={() => setIsEditing(false)}
              disabled={saveStatus === 'saving'}
              className="bg-gray-600 text-white px-6 py-3 rounded-lg font-medium hover:bg-gray-700 transition-colors duration-200"
            >
              Cancel
            </button>
            <button
              onClick={handleSaveProfile}
              disabled={saveStatus === 'saving'}
              className="bg-yellow-400 text-gray-900 px-6 py-3 rounded-lg font-medium hover:bg-yellow-300 transition-colors duration-200 flex items-center space-x-2 disabled:opacity-50"
            >
              {saveStatus === 'saving' ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-gray-900"></div>
                  <span>Saving...</span>
                </>
              ) : (
                <>
                  <Save className="w-4 h-4" />
                  <span>Save Changes</span>
                </>
              )}
            </button>
          </div>
        )}
      </div>

      {/* Security Settings */}
      <div className="bg-gray-800 rounded-2xl p-8 border border-gray-700">
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-2xl font-bold text-white">Security Settings</h2>
          <button
            onClick={() => setShowPasswordChange(!showPasswordChange)}
            className="bg-red-500 text-white px-4 py-2 rounded-lg font-medium hover:bg-red-600 transition-colors duration-200 flex items-center space-x-2"
          >
            <Lock className="w-4 h-4" />
            <span>Change Password</span>
          </button>
        </div>

        {showPasswordChange && (
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-400 mb-2">Current Password</label>
              <div className="relative">
                <input
                  type={showPasswords.current ? 'text' : 'password'}
                  value={passwordData.currentPassword}
                  onChange={(e) => setPasswordData({...passwordData, currentPassword: e.target.value})}
                  className="w-full bg-gray-700 border border-gray-600 rounded-lg px-4 py-2 pr-10 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-yellow-400"
                  placeholder="Enter current password"
                />
                <button
                  type="button"
                  onClick={() => setShowPasswords({...showPasswords, current: !showPasswords.current})}
                  className="absolute right-3 top-2 text-gray-400 hover:text-white"
                >
                  {showPasswords.current ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
                </button>
              </div>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-400 mb-2">New Password</label>
              <div className="relative">
                <input
                  type={showPasswords.new ? 'text' : 'password'}
                  value={passwordData.newPassword}
                  onChange={(e) => setPasswordData({...passwordData, newPassword: e.target.value})}
                  className="w-full bg-gray-700 border border-gray-600 rounded-lg px-4 py-2 pr-10 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-yellow-400"
                  placeholder="Enter new password"
                />
                <button
                  type="button"
                  onClick={() => setShowPasswords({...showPasswords, new: !showPasswords.new})}
                  className="absolute right-3 top-2 text-gray-400 hover:text-white"
                >
                  {showPasswords.new ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
                </button>
              </div>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-400 mb-2">Confirm New Password</label>
              <div className="relative">
                <input
                  type={showPasswords.confirm ? 'text' : 'password'}
                  value={passwordData.confirmPassword}
                  onChange={(e) => setPasswordData({...passwordData, confirmPassword: e.target.value})}
                  className="w-full bg-gray-700 border border-gray-600 rounded-lg px-4 py-2 pr-10 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-yellow-400"
                  placeholder="Confirm new password"
                />
                <button
                  type="button"
                  onClick={() => setShowPasswords({...showPasswords, confirm: !showPasswords.confirm})}
                  className="absolute right-3 top-2 text-gray-400 hover:text-white"
                >
                  {showPasswords.confirm ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
                </button>
              </div>
            </div>
            <div className="flex justify-end space-x-4">
              <button
                onClick={() => setShowPasswordChange(false)}
                className="bg-gray-600 text-white px-6 py-3 rounded-lg font-medium hover:bg-gray-700 transition-colors duration-200"
              >
                Cancel
              </button>
              <button
                onClick={handlePasswordChange}
                className="bg-yellow-400 text-gray-900 px-6 py-3 rounded-lg font-medium hover:bg-yellow-300 transition-colors duration-200"
              >
                Update Password
              </button>
            </div>
          </div>
        )}
      </div>

      {/* Export & Share */}
      <div className="bg-gray-800 rounded-2xl p-8 border border-gray-700">
        <h2 className="text-2xl font-bold text-white mb-6">Export & Share</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <button
            onClick={generatePDF}
            className="bg-blue-500 text-white p-6 rounded-xl hover:bg-blue-600 transition-colors duration-200 flex items-center space-x-4"
          >
            <Download className="w-8 h-8" />
            <div className="text-left">
              <p className="font-medium">Download Report</p>
              <p className="text-sm text-blue-200">Get your complete academic report</p>
            </div>
          </button>
          <button
            onClick={shareProfile}
            className="bg-green-500 text-white p-6 rounded-xl hover:bg-green-600 transition-colors duration-200 flex items-center space-x-4"
          >
            <Share2 className="w-8 h-8" />
            <div className="text-left">
              <p className="font-medium">Share Performance</p>
              <p className="text-sm text-green-200">Share your CGPA with others</p>
            </div>
          </button>
        </div>
      </div>
    </div>
  );
};

export default ProfileSection;